<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="2.14.6" version="1.0">
This file is intended to be loaded by Logisim-evolution (https://github.com/reds-heig/logisim-evolution).
<lib desc="#Wiring" name="0"/>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2">
    <tool name="Multiplexer">
      <a name="enable" val="false"/>
    </tool>
    <tool name="Demultiplexer">
      <a name="enable" val="false"/>
    </tool>
  </lib>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4">
    <tool name="ROM">
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="#I/O" name="5"/>
  <lib desc="#HDL-IP" name="6">
    <tool name="VHDL Entity">
      <a name="content">--------------------------------------------------------------------------------&#13;
-- HEIG-VD, institute REDS, 1400 Yverdon-les-Bains&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
library ieee;&#13;
  use ieee.std_logic_1164.all;&#13;
  --use ieee.numeric_std.all;&#13;
&#13;
entity VHDL_Component is&#13;
  port(&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    horloge_i  : in  std_logic;                    -- input bit example&#13;
    val_i      : in  std_logic_vector(3 downto 0); -- input vector example&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert output ports below&#13;
    max_o      : out std_logic;                    -- output bit example&#13;
    cpt_o      : out std_logic_Vector(3 downto 0)  -- output vector example&#13;
    );&#13;
end VHDL_Component;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
architecture type_architecture of VHDL_Component is&#13;
&#13;
&#13;
begin&#13;
&#13;
&#13;
end type_architecture;&#13;
</a>
    </tool>
  </lib>
  <lib desc="#TCL" name="7">
    <tool name="TclGeneric">
      <a name="content">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
&#13;
entity TCL_Generic is&#13;
  port(&#13;
    --Insert input ports below&#13;
    horloge_i  : in  std_logic;                    -- input bit example&#13;
    val_i      : in  std_logic_vector(3 downto 0); -- input vector example&#13;
&#13;
	  --Insert output ports below&#13;
    max_o      : out std_logic;                    -- output bit example&#13;
    cpt_o      : out std_logic_Vector(3 downto 0)  -- output vector example&#13;
  );&#13;
end TCL_Generic;&#13;
</a>
    </tool>
  </lib>
  <lib desc="#Base" name="8">
    <tool name="Text Tool">
      <a name="text" val=""/>
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <lib desc="#BFH-Praktika" name="9"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
    <a name="tickmain" val="half_period"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Text Tool">
      <a name="text" val=""/>
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="valign" val="base"/>
    </tool>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </tool>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
  </toolbar>
  <circuit name="main">
    <a name="circuit" val="main"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif bold 16"/>
    <a name="circuitnamedbox" val="true"/>
    <a name="circuitvhdlpath" val=""/>
    <wire from="(270,400)" to="(320,400)"/>
    <wire from="(470,220)" to="(470,230)"/>
    <wire from="(480,370)" to="(480,380)"/>
    <wire from="(290,240)" to="(290,250)"/>
    <wire from="(290,380)" to="(290,390)"/>
    <wire from="(300,220)" to="(300,240)"/>
    <wire from="(300,360)" to="(300,380)"/>
    <wire from="(470,350)" to="(470,370)"/>
    <wire from="(310,200)" to="(310,230)"/>
    <wire from="(310,340)" to="(310,370)"/>
    <wire from="(280,260)" to="(320,260)"/>
    <wire from="(270,340)" to="(310,340)"/>
    <wire from="(460,390)" to="(490,390)"/>
    <wire from="(290,250)" to="(320,250)"/>
    <wire from="(280,200)" to="(310,200)"/>
    <wire from="(270,360)" to="(300,360)"/>
    <wire from="(290,390)" to="(320,390)"/>
    <wire from="(300,240)" to="(320,240)"/>
    <wire from="(280,220)" to="(300,220)"/>
    <wire from="(300,380)" to="(320,380)"/>
    <wire from="(270,380)" to="(290,380)"/>
    <wire from="(460,240)" to="(480,240)"/>
    <wire from="(460,380)" to="(480,380)"/>
    <wire from="(470,350)" to="(490,350)"/>
    <wire from="(460,230)" to="(470,230)"/>
    <wire from="(470,220)" to="(480,220)"/>
    <wire from="(480,370)" to="(490,370)"/>
    <wire from="(460,370)" to="(470,370)"/>
    <wire from="(280,240)" to="(290,240)"/>
    <wire from="(310,230)" to="(320,230)"/>
    <wire from="(310,370)" to="(320,370)"/>
    <comp lib="6" loc="(320,190)" name="VHDL Entity">
      <a name="content">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;&#13;
&#13;
entity maq_refri is&#13;
    -- entrada: 0: nada, 2: 10 cent, 3: 25 cent, 4 : 50 cent, 5: 1 real&#13;
    port (&#13;
        entrada : in std_logic_vector(2 downto 0) := "000";&#13;
        botao, rst, clk : in std_logic;&#13;
        refri : out std_logic := '0';&#13;
        devolve : out std_logic := '0'&#13;
    );&#13;
&#13;
end maq_refri;&#13;
&#13;
architecture arch_refri of maq_refri is&#13;
&#13;
    type state_t is (refri_idle, refri_give, refri_reset);&#13;
&#13;
    signal current_state : state_t := refri_idle;&#13;
    signal next_state : state_t := refri_idle;&#13;
    signal grana_total : integer range 0 to 63 := 0;&#13;
&#13;
begin&#13;

    impr:process(current_state, next_state, grana_total, botao) is
	begin
		if (current_state'EVENT) then
	    		report "----------&gt; CHANGE IN current_state: " &amp; state_t'image(current_state);
	  	elsif (next_state'EVENT) then
	  		report "----------&gt; CHANGE IN next_state: " &amp; state_t'image(next_state);
	  	elsif (grana_total'EVENT) then
	  		report "----------&gt; CHANGE IN GRANA: " &amp; integer'image(grana_total);
	  	elsif (botao'EVENT) then
	  		report "----------&gt; CHANGE IN BOTAO: " &amp; std_logic'image(botao);
	  	end if;
	end process;

    comb:process(clk) is&#13;
    begin&#13;
        if falling_edge(clk) then&#13;
            next_state &lt;= current_state;&#13;
            &#13;
            case current_state is&#13;
                when refri_idle =&gt;&#13;
&#13;
                    devolve &lt;= '0';&#13;
                    refri &lt;= '0';&#13;
&#13;
                    if botao = '1' then&#13;
&#13;
                        if grana_total = 20 then&#13;
                            next_state &lt;= refri_give;&#13;
                        else&#13;
                            next_state &lt;= refri_reset;&#13;
                        end if;&#13;
&#13;
                    else &#13;
                        if grana_total &gt; 20 then&#13;
                            next_state &lt;= refri_reset;&#13;
                        else &#13;
                            next_state &lt;= refri_idle;&#13;
                        end if;&#13;
&#13;
                    end if;&#13;
&#13;
                    &#13;
                when refri_give =&gt;&#13;
&#13;
                    devolve &lt;= '0';&#13;
                    refri &lt;= '1';&#13;
&#13;
                    next_state &lt;= refri_idle;&#13;
                    &#13;
                when refri_reset =&gt;&#13;
                    devolve &lt;= '1';&#13;
                    next_state &lt;= refri_idle;&#13;
            end case;&#13;
&#13;
            -- report "grana total clock comb: " &amp; integer'image(grana_total);&#13;
            -- report "current_state " &amp; state_t'image(current_state);&#13;
            -- report "next_state " &amp; state_t'image(next_state);&#13;
&#13;
        end if;&#13;
    end process comb;&#13;
&#13;
    mem:process(rst, clk) is&#13;
    begin&#13;
        if rising_edge(clk) then&#13;
&#13;
            if rst = '1' then&#13;
                current_state &lt;= refri_idle;&#13;
            else&#13;
                current_state &lt;= next_state;&#13;
&#13;
            end if;&#13;
&#13;
            if next_state = refri_reset or next_state = refri_give or rst = '1' then&#13;
                grana_total &lt;= 0;&#13;
            else &#13;
                case entrada is&#13;
&#13;
                    when "010" =&gt;&#13;
                        grana_total &lt;= grana_total + 2;&#13;
                    when "011" =&gt;&#13;
                        grana_total &lt;= grana_total + 5;&#13;
                    when "100" =&gt; &#13;
                        grana_total &lt;= grana_total + 10;&#13;
                    when "101" =&gt; &#13;
                        grana_total &lt;= grana_total + 20;&#13;
                    when others =&gt;&#13;
                        null;&#13;
                end case;&#13;
&#13;
            end if;&#13;
        end if;&#13;
        -- report "grana total clock mem: " &amp; integer'image(grana_total);&#13;
        -- report "current_state " &amp; state_t'image(current_state);&#13;
        -- report "next_state " &amp; state_t'image(next_state);&#13;
    end process mem;&#13;
end arch_refri;&#13;
&#13;
</a>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp lib="0" loc="(480,220)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(480,240)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(280,260)" name="Pin"/>
    <comp lib="0" loc="(280,240)" name="Pin"/>
    <comp lib="0" loc="(280,220)" name="Pin"/>
    <comp lib="0" loc="(280,200)" name="Pin">
      <a name="width" val="3"/>
    </comp>
    <comp lib="6" loc="(320,330)" name="VHDL Entity">
      <a name="content">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;&#13;
&#13;
entity elevador is&#13;
    port (&#13;
        andar_requisitado: in std_logic_vector(3 downto 0);&#13;
        --requisitado indica se tem alguem chamando o elevador&#13;
        clk, requisitado, rst: in std_logic;&#13;
        --posicao atual do elevador&#13;
        posicao_output: out std_logic_vector(3 downto 0) := "0000";&#13;
        --direcao: '0' indica descendo, '1' indica subindo&#13;
        direcao: out std_logic := '0';&#13;
        --andando: '0' indica parado, '1' indica que esta andando&#13;
        andando: out std_logic := '0'&#13;
    );&#13;
&#13;
end elevador;&#13;
&#13;
architecture arch_elevador of elevador is&#13;
&#13;
    type state_t is (up, down, stop);&#13;
&#13;
    --signal andar : integer range 0 to 15 := 0;&#13;
    signal current_state : state_t := stop;&#13;
    signal next_state : state_t;&#13;
    signal destino : std_logic_vector(3 downto 0) := "0000";&#13;
&#13;
    signal posicao : std_logic_vector(3 downto 0) := "0000";&#13;
&#13;
    constant subindo : std_logic := '1';&#13;
    constant descendo : std_logic := '0';&#13;
&#13;
begin&#13;
&#13;
    impr:process(current_state, next_state, destino, posicao) is&#13;
    begin&#13;
		if (current_state'EVENT) then&#13;
	    	report "----------&gt; CHANGE IN current_state: " &amp; state_t'image(current_state);&#13;
		elsif (next_state'EVENT) then&#13;
			report "----------&gt; CHANGE IN next_state: " &amp; state_t'image(next_state);&#13;
	  	--elsif (destino'EVENT) then&#13;
			--report "----------&gt; CHANGE IN DESTINO: " &amp; unsigned'image(unsigned(destino));&#13;
		--elsif (posicao'EVENT) then&#13;
			--report "----------&gt; CHANGE IN POSICAO: " &amp; unsigned'image(unsigned(posicao));&#13;
		end if;&#13;
    end process impr;&#13;
&#13;
    comb:process(clk) is &#13;
    begin&#13;
        if rising_edge(clk) then&#13;
&#13;
            next_state &lt;= current_state;&#13;
            posicao_output &lt;= posicao;&#13;
&#13;
            case current_state is &#13;
                when stop =&gt;&#13;
&#13;
                    andando &lt;= '0';&#13;
&#13;
                    if requisitado = '1' and posicao /= destino then&#13;
&#13;
                        if posicao &lt; destino then&#13;
                            next_state &lt;= up;&#13;
                        else &#13;
                            next_state &lt;= down;&#13;
                        end if;&#13;
&#13;
                    end if;&#13;
&#13;
                when up =&gt;&#13;
&#13;
                    if posicao = andar_requisitado then&#13;
                        next_state &lt;= stop;&#13;
                    end if;&#13;
&#13;
                    andando &lt;= '1';&#13;
                    direcao &lt;= subindo;&#13;
&#13;
                when down =&gt;&#13;
&#13;
                    if posicao = andar_requisitado then &#13;
                        next_state &lt;= stop;&#13;
                    end if;&#13;
&#13;
                    andando &lt;= '1';&#13;
                    direcao &lt;= descendo;&#13;
&#13;
            end case;&#13;
        end if;&#13;
&#13;
    end process comb;&#13;
&#13;
    mem:process(clk) is &#13;
    begin&#13;
        if rst = '1' then&#13;
&#13;
            current_state &lt;= stop;&#13;
            -- andando &lt;= '0';&#13;
            posicao &lt;= "0000";&#13;
&#13;
        elsif falling_edge(clk) then&#13;
&#13;
            destino &lt;= andar_requisitado;&#13;
            current_state &lt;= next_state;&#13;
&#13;
            if next_state = up then&#13;
                posicao &lt;= std_logic_vector(unsigned(posicao) + 1);&#13;
            elsif next_state = down then&#13;
                posicao &lt;= std_logic_vector(unsigned(posicao) - 1);&#13;
            end if;&#13;
&#13;
        end if;&#13;
&#13;
    end process mem;&#13;
&#13;
    &#13;
&#13;
end arch_elevador;&#13;
&#13;
</a>
    </comp>
    <comp lib="0" loc="(270,360)" name="Pin"/>
    <comp lib="0" loc="(270,380)" name="Pin"/>
    <comp lib="0" loc="(270,400)" name="Pin"/>
    <comp lib="0" loc="(490,350)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(490,390)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(490,370)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </comp>
    <comp lib="0" loc="(270,340)" name="Pin">
      <a name="width" val="4"/>
    </comp>
  </circuit>
</project>
